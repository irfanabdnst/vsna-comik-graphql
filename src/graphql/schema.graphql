### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Chapter {
  chapterNumber: String!
  comic: Comic
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String
  updatedAt: DateTime!
}

type Comic {
  author: String
  coverImageUrl: String
  createdAt: DateTime!
  description: String
  id: Int!
  published: Boolean!
  releaseDate: DateTime
  tags: [Tag]
  title: String!
  updatedAt: DateTime!
  users: [User]
}

input CreateChapterInput {
  chapterNumber: String!
  published: Boolean
  title: String
}

input CreateComicInput {
  author: String
  coverImageUrl: String
  description: String
  published: Boolean = false
  releaseDate: DateTime
  tagId: [Int]
  title: String!
}

input CreateImageInput {
  imageUrl: String!
  pageNumber: Int!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Image {
  chapter: Chapter
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  pageNumber: Int!
  updatedAt: DateTime!
}

type Mutation {
  createChapter(comicId: Int!, data: CreateChapterInput!): Chapter!
  createComic(data: CreateComicInput!): Comic!
  createImage(chapterId: Int!, data: CreateImageInput!): Image!
  createTag(name: String!): Tag!
  createUser(data: CreateUserInput!): User!
  deleteChapter(id: Int!): Chapter!
  deleteComic(id: Int!): Comic!
  deleteImage(id: Int!): Image!
  deleteTag(id: Int!): Tag!
  deleteUser(id: Int!): User!
  updateChapter(data: UpdateChapterInput!, id: Int!): Chapter!
  updateChapterComic(chapterId: Int!, comicId: Int!): Chapter!
  updateComic(data: UpdateComicInput!, id: Int!): Comic!
  updateComicTag(comicId: Int!, tagId: [Int]!): Comic!
}

type Query {
  chapter(id: Int!): Chapter
  chapters: [Chapter]!
  comic(id: Int!): Comic
  comics: [Comic]!
  images(chapterId: Int!): [Image]!
  tag(id: Int!): Tag
  tags: [Tag]!
  user(id: Int!): User
  users: [User]!
}

enum Role {
  ADMIN
  USER
}

type Tag {
  comics: [Comic]
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

input UpdateChapterInput {
  chapterNumber: String
  published: Boolean
  title: String
}

input UpdateComicInput {
  author: String
  coverImageUrl: String
  description: String
  published: Boolean = false
  releaseDate: DateTime
  title: String
}

type User {
  bookmarks: [Comic]
  createdAt: DateTime!
  email: String!
  id: Int!
  role: Role!
  updatedAt: DateTime!
  username: String!
}